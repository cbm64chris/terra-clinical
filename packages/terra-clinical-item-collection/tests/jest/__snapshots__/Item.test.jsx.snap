// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List View Tests should pass customProps to the Item 1`] = `
<ListItem
  className="ListItem"
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a comment 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <div>
          <ItemComment
            isTruncated={false}
            text="comment"
          />
        </div>
      }
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a single children 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with a start accessory 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      startAccessory={
        <div>
          <p>
            start
          </p>
        </div>
      }
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with all elements 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <div>
          <ItemComment
            isTruncated={false}
            text="comment"
          />
        </div>
      }
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <div>
          <p>
            end
          </p>
        </div>
      }
      isTruncated={false}
      layout="oneColumn"
      startAccessory={
        <div>
          <p>
            start
          </p>
        </div>
      }
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with an end accessory 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      endAccessory={
        <div>
          <p>
            end
          </p>
        </div>
      }
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with children 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a Item with list item styles 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignTop"
      comment={
        <div>
          <ItemComment
            isTruncated={false}
            text="comment"
          />
        </div>
      }
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <div>
          <p>
            end
          </p>
        </div>
      }
      isTruncated={true}
      layout="twoColumns"
      startAccessory={
        <div>
          <p>
            start
          </p>
        </div>
      }
      textEmphasis="start"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a default Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;

exports[`List View Tests should render a selectable Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      comment={
        <div>
          <ItemComment
            isTruncated={false}
            text="comment"
          />
        </div>
      }
      displays={
        Array [
          <ItemDisplay
            isTruncated={false}
            text="Display 1"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 2"
          />,
          <ItemDisplay
            isTruncated={false}
            text="Display 3"
          />,
        ]
      }
      endAccessory={
        <div>
          <p>
            end
          </p>
        </div>
      }
      isTruncated={false}
      layout="oneColumn"
      startAccessory={
        <div>
          <p>
            start
          </p>
        </div>
      }
      textEmphasis="default"
    />
  }
  isSelectable={true}
  isSelected={false}
  tabIndex={0}
/>
`;

exports[`List View Tests should render a selected Item 1`] = `
<TableRow
  isSelected={true}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should pass customProps to the Item 1`] = `
<TableRow
  className="TableRow"
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item that ignores list item styles 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with a comment 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with a single children 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with a start accessory 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with all elements 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with an end accessory 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a Item with children 1`] = `
<TableRow
  isSelected={false}
>
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a default Item 1`] = `
<TableRow
  isSelected={false}
/>
`;

exports[`Table View Tests should render a selectable Item 1`] = `
<TableRow
  isSelectable={true}
  isSelected={false}
  tabIndex={0}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`Table View Tests should render a selected Item 1`] = `
<TableRow
  isSelected={true}
>
  <TableCell
    className="content-accessory"
    content={
      <p>
        start
      </p>
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 1"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 2"
      />
    }
  />
  <TableCell
    className="content-display"
    content={
      <ItemDisplay
        isTruncated={false}
        text="Display 3"
      />
    }
  />
  <TableCell
    className="content-comment"
    content={
      <ItemComment
        isTruncated={false}
        text="comment"
      />
    }
  />
  <TableCell
    className="content-accessory"
    content={
      <p>
        end
      </p>
    }
  />
</TableRow>
`;

exports[`should render a default Item 1`] = `
<ListItem
  content={
    <ItemView
      accessoryAlignment="alignCenter"
      displays={Array []}
      isTruncated={false}
      layout="oneColumn"
      textEmphasis="default"
    />
  }
  isSelected={false}
/>
`;
