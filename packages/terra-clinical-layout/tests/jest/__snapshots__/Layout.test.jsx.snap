// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout Menu Disabled should render a Layout when huge 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "huge",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "huge",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      />
    }
    size="huge"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Disabled should render a Layout when large 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "large",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "large",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      />
    }
    size="large"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Disabled should render a Layout when medium 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "medium",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "medium",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      />
    }
    size="medium"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Disabled should render a Layout when small 1`] = `
<ContentContainer
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={
      <ContentContainer
        fill={true}
        header={
          <div
            layoutConfig={
              Object {
                "isCompactLayout": true,
                "menuIsOpen": false,
                "size": "small",
                "toggleMenu": false,
              }
            }
          >
            Test Header
          </div>
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "small",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      />
    }
    size="small"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Disabled should render a Layout when tiny 1`] = `
<ContentContainer
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={
      <ContentContainer
        fill={true}
        header={
          <div
            layoutConfig={
              Object {
                "isCompactLayout": true,
                "menuIsOpen": false,
                "size": "tiny",
                "toggleMenu": false,
              }
            }
          >
            Test Header
          </div>
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "tiny",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      />
    }
    size="tiny"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Enabled should render a Layout when huge 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "huge",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={true}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "huge",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "huge",
              "toggleMenu": [Function],
            }
          }
        >
          Test Menu
        </div>
      </ContentContainer>
    }
    size="huge"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Enabled should render a Layout when large 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "large",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={true}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "large",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "large",
              "toggleMenu": [Function],
            }
          }
        >
          Test Menu
        </div>
      </ContentContainer>
    }
    size="large"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Enabled should render a Layout when medium 1`] = `
<ContentContainer
  fill={true}
  header={
    <div
      layoutConfig={
        Object {
          "isCompactLayout": false,
          "menuIsOpen": false,
          "size": "medium",
          "toggleMenu": false,
        }
      }
    >
      Test Header
    </div>
  }
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={true}
    mainContent={
      <ContentContainer
        fill={true}
        header={false}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "medium",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
        header={
          <MenuHeader
            isPinned={false}
            togglePin={[Function]}
          />
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": false,
              "menuIsOpen": false,
              "size": "medium",
              "toggleMenu": [Function],
            }
          }
        >
          Test Menu
        </div>
      </ContentContainer>
    }
    size="medium"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Enabled should render a Layout when small 1`] = `
<ContentContainer
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={true}
    mainContent={
      <ContentContainer
        fill={true}
        header={
          <div
            layoutConfig={
              Object {
                "isCompactLayout": true,
                "menuIsOpen": false,
                "size": "small",
                "toggleMenu": [Function],
              }
            }
          >
            Test Header
          </div>
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "small",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "small",
              "toggleMenu": [Function],
            }
          }
        >
          Test Menu
        </div>
      </ContentContainer>
    }
    size="small"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout Menu Enabled should render a Layout when tiny 1`] = `
<ContentContainer
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={true}
    mainContent={
      <ContentContainer
        fill={true}
        header={
          <div
            layoutConfig={
              Object {
                "isCompactLayout": true,
                "menuIsOpen": false,
                "size": "tiny",
                "toggleMenu": [Function],
              }
            }
          >
            Test Header
          </div>
        }
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "tiny",
              "toggleMenu": [Function],
            }
          }
        >
          Test Content
        </div>
      </ContentContainer>
    }
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      >
        <div
          layoutConfig={
            Object {
              "isCompactLayout": true,
              "menuIsOpen": false,
              "size": "tiny",
              "toggleMenu": [Function],
            }
          }
        >
          Test Menu
        </div>
      </ContentContainer>
    }
    size="tiny"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout should render a Layout with custom props 1`] = `
<ContentContainer
  data-test-attr="test-val"
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={null}
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      />
    }
    size="tiny"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;

exports[`Layout should render a Layout without optional props 1`] = `
<ContentContainer
  fill={true}
  header={false}
>
  <MenuSlidePanel
    isAnimated={true}
    isOpen={false}
    isToggleEnabled={false}
    mainContent={null}
    onRequestClose={[Function]}
    panelBehavior="overlay"
    panelContent={
      <ContentContainer
        fill={true}
      />
    }
    size="tiny"
    toggleMenu={[Function]}
  />
</ContentContainer>
`;
